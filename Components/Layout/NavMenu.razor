@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

<nav class="nav container">
  <div class="nav__data">
    <a href="" class="nav__logo">
      <img src="images/logo.png" width="128" height="63" alt="cse muscle cars home">
    </a>

    <div class="nav__toggle" id="nav-toggle">
      <i class="ri-menu-line nav__burger"></i>
      <i class="ri-close-line nav__close"></i>
    </div>
  </div>

  <!-- NAV MENU -->
  <nav class="nav__menu" id="nav-menu">
  @inject NavigationManager Nav
  @inject IJSRuntime JS

    <ul class="nav__list">
      <li><a href="/" class="nav__link">Home</a></li>
      <li><a href="/about" class="nav__link">About</a></li>
      <li><a href="/vehicles" class="nav__link">Vehicles</a></li>
      <li><a href="/services" class="nav__link">Services</a></li>
      <li><a href="/contact" class="nav__link">Contact</a></li>

      <AuthorizeView>
        <Authorized>
          <li class="nav__item nav__account">
            <a href="#" class="nav__link" @onclick="ToggleAccountMenu" @onclick:preventDefault="true">My Account ▾</a>
            <ul class="nav__submenu @(showAccountMenu ? "visible" : "")">
              <li><a href="/account" class="nav__link">Profile</a></li>
              <li>
                <a href="/api/auth/logout?redirect=/" class="nav__link" @onclick="OnLogoutClicked" @onclick:preventDefault="true">Logout</a>
              </li>
            </ul>
          </li>
        </Authorized>
        <NotAuthorized>
          <li><a href="/login" class="nav__link">Login</a></li>
        </NotAuthorized>
      </AuthorizeView>
    </ul>

  </nav>
</nav>

  @code {
    private bool showAccountMenu = false;

    private void ToggleAccountMenu()
    {
      showAccountMenu = !showAccountMenu;
    }

    private async Task OnLogoutClicked()
    {
      try
      {
        // Perform a full navigation to the server logout endpoint so the browser
        // receives the Set-Cookie on the navigation response (more reliable than
        // expecting Set-Cookie from a fetch response in all environments).
        var ts = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
        // redirect param instructs server where to send the browser after cookie is cleared
        var redirectTarget = "/?t=" + ts;
        var logoutUrl = "/api/auth/logout?redirect=" + Uri.EscapeDataString(redirectTarget);

        try
        {
          await JS.InvokeVoidAsync("redirect", logoutUrl);
        }
        catch
        {
          Nav.NavigateTo(logoutUrl, forceLoad: true);
        }
      }
      catch
      {
        // best-effort: still navigate home
        Nav.NavigateTo("/", forceLoad: true);
      }
    }
  }
