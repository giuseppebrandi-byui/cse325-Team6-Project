@page "/register"
@using MyMuscleCars.Models
@using System.ComponentModel.DataAnnotations
@inject IHttpClientFactory HttpClientFactory


<EditForm Model="@registrationModel"
          OnValidSubmit="HandleSubmit"
          OnInvalidSubmit="HandleInvalidSubmit"
          FormName="RegisterForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

<InputText @bind-Value="registrationModel.FirstName" @bind-Value:event="oninput" placeholder="First Name" />
<InputText @bind-Value="registrationModel.LastName" @bind-Value:event="oninput" placeholder="Last Name" />
<InputText @bind-Value="registrationModel.Email" @bind-Value:event="oninput" placeholder="Email" />
<InputText @bind-Value="registrationModel.Password" @bind-Value:event="oninput" placeholder="Password" type="password" />
<InputText @bind-Value="registrationModel.ConfirmPassword" @bind-Value:event="oninput" placeholder="Confirm Password" type="password" />


    <!-- submit button does NOT need a form="" attribute -->
    <button type="submit">Submit</button>
</EditForm>

@code {
    private RegistrationModel registrationModel = new();

    private void HandleSubmit()
    {
        Console.WriteLine("✅ HandleSubmit triggered");
    }

    private void HandleInvalidSubmit(EditContext ctx)
    {
        Console.WriteLine("❌ Invalid submit triggered: " + string.Join(", ", ctx.GetValidationMessages()));
    }
}




@* <PageTitle>CSE Muscle Cars - Register</PageTitle>

<main>
    <article>
        <section class="section registration" aria-labelledby="registration-label">
            <div class="container">

                <p class="section-subtitle :light" id="registration-label">Join Our Community</p>
                <h2 class="h2 section-title">Create Your Account</h2>

                <div class="registration-container">
                    <div class="registration-form-container">

                <EditForm Model="@registrationModel" 
                        OnValidSubmit="HandleSubmit" 
                        OnInvalidSubmit="HandleInvalidSubmit"
                        FormName="RegisterForm" 
                        class="registration-form">

                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- First Name -->
                    <div class="form-group">
                        <label for="firstName" class="form-label">First Name</label>
                        <InputText id="firstName" 
                                class="form-input" 
                                @bind-Value="registrationModel.FirstName" 
                                placeholder="Enter your first name" />
                        <ValidationMessage For="@(() => registrationModel.FirstName)" />
                    </div>

                    <!-- Last Name -->
                    <div class="form-group">
                        <label for="lastName" class="form-label">Last Name</label>
                        <InputText id="lastName" 
                                class="form-input" 
                                @bind-Value="registrationModel.LastName" 
                                placeholder="Enter your last name" />
                        <ValidationMessage For="@(() => registrationModel.LastName)" />
                    </div>

                    <!-- Email -->
                    <div class="form-group">
                        <label for="email" class="form-label">Email Address</label>
                        <InputText id="email" 
                                class="form-input" 
                                @bind-Value="registrationModel.Email" 
                                placeholder="Enter your email" />
                        <ValidationMessage For="@(() => registrationModel.Email)" />
                    </div>

                    <!-- Password -->
                    <div class="form-group">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password" 
                                class="form-input" 
                                @bind-Value="registrationModel.Password" 
                                placeholder="Create a secure password" 
                                type="password" />
                        <ValidationMessage For="@(() => registrationModel.Password)" />
                    </div>

                    <!-- Confirm Password -->
                    <div class="form-group">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <InputText id="confirmPassword" 
                                class="form-input" 
                                @bind-Value="registrationModel.ConfirmPassword" 
                                placeholder="Confirm your password" 
                                type="password" />
                        <ValidationMessage For="@(() => registrationModel.ConfirmPassword)" />
                    </div>

                    <!-- Error / Success Messages -->
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="error-message">
                            <i class="ri-error-warning-line"></i> @errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="success-message">
                            <i class="ri-check-line"></i> @successMessage
                        </div>
                    }

                    <!-- Submit Button -->
                    <button type="submit" class="btn registration-btn">

                            <span>Create Account</span>
                            <span class="material-symbols-rounded">arrow_forward</span>

                    </button>
                </EditForm>


                        <div class="registration-footer">
                            <p>Already have an account? <a href="/login" class="btn-link">Sign In</a></p>
                        </div>

                    </div>
                </div>
            </div>
        </section>
    </article>
</main>

@code {
    private RegistrationModel registrationModel = new RegistrationModel();

    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private void HandleInvalidSubmit(EditContext context)
    {
        Console.WriteLine("❌ Invalid submit triggered");
        foreach (var error in context.GetValidationMessages())
        {
            Console.WriteLine("Validation error: " + error);
        }
    }

    private async Task HandleSubmit()
{
    Console.WriteLine("✅ HandleSubmit triggered");
    errorMessage = string.Empty;
    successMessage = string.Empty;

    try
    {
        if (registrationModel.Password != registrationModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        var client = HttpClientFactory.CreateClient("ServerAPI");

        var response = await client.PostAsJsonAsync("api/register", registrationModel);

        if (response.IsSuccessStatusCode)
        {
            successMessage = "Account created successfully! You can now log in.";
            registrationModel = new RegistrationModel();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            errorMessage = $"Error: {error}";
        }
    }
    catch (Exception ex)
    {
        errorMessage = $"Unexpected error: {ex.Message}";
    }

}

} *@