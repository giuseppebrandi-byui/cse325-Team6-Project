@using System;
@using System.Globalization;

@page "/login"
<PageTitle>CSE Muscle Cars - Car Sales & Repair Service</PageTitle>


  <main>
    <article>
      <!-- 
        - #LOGIN SECTION
      -->
      <section class="section login" aria-labelledby="login-label">
        <div class="container">

          <p class="section-subtitle :light" id="registration-label">Join Our Community</p>
          <h2 class="h2 section-title">Login</h2>

          <div class="login-container">
            <div class="login-form-container">

              <EditForm Model="loginModel" OnValidSubmit="HandleSubmit" class="login-form">
                <DataAnnotationsValidator />
               
                <div class="form-group">
                  <label for="email" class="form-label">Email Address</label>
                  <InputText id="email" class="form-input" @bind-Value="loginModel.Email"
                    placeholder="Enter your email" />
                  <ValidationMessage For="@(() => loginModel.Email)" />
                </div>

                <div class="form-group">
                  <label for="password" class="form-label">Password</label>
                  <InputText type="password" id="password" class="form-input" @bind-Value="loginModel.Password"
                    placeholder="Enter your password" />
                  <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                  <div class="error-message">
                    <i class="ri-error-warning-line"></i>
                    @errorMessage
                  </div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                  <div class="success-message">
                    <i class="ri-check-line"></i>
                    @successMessage
                  </div>
                }

                <button type="submit" class="btn login-btn" disabled="@isLoading">
                  @if (isLoading)
                  {
                    <span class="loading-spinner"></span>
                    <span>Login into Account...</span>
                  }
                  else
                  {
                    <span class="span">Login into Account</span>
                    <span class="material-symbols-rounded">arrow_forward</span>
                  }
                </button>

              </EditForm>

              <div class="login-footer">
                <p>Don't have an account? <a href="/register" class="btn-link">Create Account</a></p>
              </div>

            </div>

          </div>

        </div>
      </section>

    </article>
  </main>

@code {
  private LoginModel loginModel = new();
  private bool isLoading = false;
  private string errorMessage = string.Empty;
  private string successMessage = string.Empty;

  private async Task HandleSubmit()
  {
    try
    {
      isLoading = true;
      errorMessage = string.Empty;
      successMessage = string.Empty;

      // Simulate API call - replace with actual implementation
      await Task.Delay(2000);

      // For now, just show success message
      successMessage = "Login is successfull!";

      // Reset form
      loginModel = new LoginModel();
    }
    catch (Exception)
    {
      errorMessage = "An error occurred while logging into your account. Please try again.";
    }
    finally
    {
      isLoading = false;
    }
  }


  public class LoginModel
  {
    [Required(ErrorMessage = "Email address is required.")]
    [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
    public string Email { get; set; } = string.Empty;

    [Required(ErrorMessage = "Password is required.")]
    [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be between 6 and 100 characters.")]
    public string Password { get; set; } = string.Empty;
    }
}
